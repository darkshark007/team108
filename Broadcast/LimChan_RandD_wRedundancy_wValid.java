package team108.Broadcast;

import battlecode.common.Clock;
import battlecode.common.GameActionException;
import battlecode.common.RobotController;

public class LimChan_RandD_wRedundancy_wValid extends Broadcast {
	
	/*
	 *  This is an advanced broadcast management system which implements several features:
	 *     -- Channel abstraction    : Supports consistent (but limited) channel definition, ie HQ 
	 *                                 can delegate tasks on broadcast channel 5, Soldiers can 
	 *                                 respond on channel 7, etc.  This ability is maintained.
	 *                                 This class supports up to 32 channels (0-31).
	 *     -- Random Distribution    : broadcast channels are distributed randomly across the full 
	 *                                 broadcast spectrum (0->65,536) making the channels difficult 
	 *                                 and costly to interfere with.
	 *     -- Redundant data backup  : Data broadcasts are stored in many places (maybe hundreds) so 
	 *                                 data is still likely retrievable even despite enemy interference 
	 *                                 by checking redundant storage locations.
	 *     -- Broadcast validation   : Each broadcast is stored and retrieved with a validation code, 
	 *                                 such that interference by enemy broadcast can easily be detected 
	 *                                 and valid data can be retrieved from one of many redundant 
	 *                                 sources.  
	 * 
	 * 
	 *  This system is currently working as expected, though it has a couple problems.
	 * 
	 *  The methods are fairly optimized and light-weight, though it's a little heavy on the 
	 *  initialization.  It typically takes about 11,000-12,000 bytecodes to initialize this 
	 *  class for -each- bot, there is no way to make it static-global.  This causes a stall of at 
	 *  least one turn in every bot.
	 *  
	 *  Second, it doesnt seem as if there is much (if any) broadcast countering and/or tampering 
	 *  by competing bots.  So it may be sufficient (though risky) to just use a simple broadcast 
	 *  system, possibly with an interference detector and a signal to switch to a more secure system.
	 *  
	 *  FUTURE ADDITIONS:
	 *    -- Must make a tweak/update to the redundancy system, where if data must be retrieved from 
	 *       a redundancy source, it should be re-broadcast to a valid current location.  Experienced 
	 *       some problems with this where data broadcast early to specific channels is not maintained 
	 *       in later channels, and alot of bytecodes are spent traversing the list of redundancy 
	 *       channels. 
	 */

	static int validationCode = 401278;
	static int[] channelList = {
		2400,59328,35840,58400,29856,28384,49664,8672,8224,56192,62016,33280,28352,14368,5376,15040,33888,2528,48352,41856,34816,14304,47936,45664,19776,58112,4864,53248,24992,12768,40544,15136,36000,14496,26720,24608,55264,4608,47456,57344,53120,14976,56640,3776,42912,20544,17088,18528,29536,19648,5472,14528,30496,63168,10240,42976,20864,33632,9504,43456,20832,58080,58976,2848,62368,45536,7712,21696,39328,13600,31616,36672,46752,40160,2464,38784,25728,12448,32608,45376,60288,49312,35360,45152,44192,24320,40480,6528,20064,27904,25216,38016,22016,59648,22880,58752,54016,61152,1600,55552,9312,49152,63712,39040,43232,62976,35040,24064,53728,34944,52096,57056,49728,2784,62272,63936,22688,9056,63072,13408,52512,50144,41280,55296,23264,45696,12928,60160,43040,45504,59072,26560,15744,60448,2016,12160,32768,37088,26752,35168,20512,59264,33600,17920,55200,32896,12256,22496,12032,40992,3072,18688,27200,37408,
		41248,20608,29376,34016,36864,32736,64,32800,22720,27520,36224,34688,19008,44448,53760,52224,62688,8640,40576,25824,5824,36896,46560,43104,8416,14016,37568,64064,15584,38464,25856,43648,42400,32256,7968,44992,17632,44128,43776,27328,23808,62944,56160,7072,11072,28800,56672,37696,45312,19520,38624,62880,43552,10112,51456,35808,8384,31264,33120,6944,40192,26240,1696,48896,2624,11712,28864,56064,40864,24896,18848,6272,20640,18208,48160,43616,47360,11360,5440,9664,8160,4800,8352,29184,43424,16096,7136,31488,25664,58496,18464,42688,57600,17728,52928,5280,21664,33952,24256,47712,54688,5568,12096,52800,2496,61312,58304,38944,55712,59616,9440,20768,52480,24448,46016,10208,18976,50880,48128,56416,47168,10048,9824,29792,35712,
		11328,35744,20704,30400,384,54176,36096,480,47264,3872,18912,576,57568,42560,61920,13824,20576,24544,6720,21056,44704,41728,63904,29600,21120,52064,47392,10784,35904,37600,62592,26304,51104,5600,25184,8832,54432,59872,3168,4320,11872,47200,53920,38976,36544,46112,9344,10912,59936,47744,16864,29504,41088,19712,40128,4896,1344,17024,4640,43584,9536,3712,4128,38272,26464,52000,41632,32576,24416,36160,3520,4224,53568,33344,62464,27840,33440,49920,6912,12000,40096,42432,14880,11040,23200,40000,36320,53280,16704,15456,27552,34368,14176,39200,48256,16608,18080,34592,46784,5504,42720,48992,7648,47424,1792,59296,53024,46688,47552,31648,58656,55072,58816,19456,38880,10496,42336,43264,39104,52128,40832,6816,5184,39552,3136,42304,
		8896,63040,33984,37120,6240,29664,63136,46144,7040,38912,3648,54880,51680,56864,42112,35776,29440,50304,608,24672,37824,43296,47616,33472,31104,44096,8000,17664,63200,20800,44928,15904,3008,63008,50336,21792,19392,55840,20160,41568,30080,24768,35616,736,1472,43360,36032,30336,37440,25472,50016,17248,52736,928,6624,24352,54560,53984,45248,56896,16800,34720,61024,62912,34784,44256,30368,32992,11264,28672,50272,38688,36800,31008,57792,51200,5248,41664,43840,17120,24480,11552,57152,57504,43680,45184,37056,30272,16736,61472,1920,47648,30688,18432,42080,2272,39584,10272,46176,49952,63776,56832,40928,41920,32096,27392,42464,45856,56960,59744,53472,13984,60192,41696,35072,16576,30112,24384,27424,58560,320,27744,20480,18144,
		50848,4032,14816,13312,61792,2176,23360,50688,57760,62848,2720,63680,22208,11424,32640,38048,53952,62528,30880,32160,56032,30656,16640,15296,20192,11200,31968,61568,36128,8576,34336,37888,49120,37728,46080,54752,28736,46048,59680,23840,58048,42656,8608,4256,51648,31872,18752,62304,12288,3968,55776,17472,51744,4096,63232,52256,49056,45344,62656,57952,23552,11904,18496,16416,6016,12064,37216,52704,9088,26016,14432,25984,13568,49856,19552,40384,8256,55744,16160,12416,28928,61952,1312,6752,36960,1952,16768,22336,54336,37376,51552,15488,55456,16832,13120,54496,9408,58016,43328,34976,5024,19904,48544,8192,41344,5664,54976,42048,28256,13152,28448,46336,7520,30560,42016,45888,49824,49184,33376,800,1248,17600,47328,50176,23392,
		38240,12192,26432,50656,62144,5952,640,30784,24224,14720,12992,23488,38432,40224,40256,6784,49632,32384,8992,15808,41824,18272,33248,1664,10656,43744,54816,59232,19616,43072,15264,35456,37312,58912,19104,55328,41792,31296,2336,53376,23936,31936,61344,58528,19168,19488,19968,10976,44576,31136,43712,18784,42272,12544,1056,46400,6464,60352,27008,18880,6336,19584,46720,30528,3936,33536,26144,48448,35328,57920,61696,10432,21088,27776,28704,9952,9760,2752,56128,42816,16960,39232,34208,4704,61088,61408,21504,13504,11520,51936,6848,51168,22080,58944,60960,2432,12800,1536,46656,57184,11488,10720,42592,33792,46592,20032,39680,25920,43808,28096,16448,35136,53440,39264,56352,22432,39136,60480,57024,41216,41024,53152,15104,
		44224,45056,51232,38720,63968,62816,29056,3808,15680,7264,16128,39296,43200,62784,25344,36704,23904,26688,1152,41888,62336,25792,7008,53824,2976,49568,40736,51520,63584,37184,28480,33760,30912,56512,17056,3328,61504,3904,43936,40640,1216,25120,32480,14656,52448,19232,11008,52384,30240,13376,45280,57088,60640,27968,46528,27872,62048,17312,26656,46912,47872,5344,61664,9696,62400,48608,3616,46304,32064,45408,21024,16384,46816,12736,61184,60128,832,19840,24832,48192,29152,33856,1504,40800,58272,15200,5056,20320,4576,19744,28192,62208,62176,45952,31680,63392,54624,32512,61120,992,5216,35936,44064,13088,42240,21248,30016,7616,3040,26048,45600,55872,32832,54304,48480,14848,21632,46208,54400,50752,18816,9600,22048,31424,
		62112,38208,44352,59456,39712,36992,11104,30048,4544,63264,51584,25952,12480,60032,51872,3360,1760,30848,27296,16032,20000,32672,11168,48800,56480,31200,20352,12704,30176,23712,31584,35104,12224,20384,44384,21760,26784,18016,32288,14752,21856,22784,49088,48384,17376,7296,18944,54592,52864,18720,38816,23744,9280,9792,27264,33504,23072,35968,45568,30624,38176,16192,28224,10624,37024,12960,22912,61760,24000,52320,47232,61888,35584,62560,23520,50464,38496,13920,15392,21952,31392,52160,160,7360,35296,28512,42528,40768,56576,33664,36384,5984,31072,9248,49376,13184,30752,36256,63296,16480,62752,21280,30208,59712,23584,55648,12832,59168,352,52640,16352,26336,7904,50720,37280,34912,18112,23648,2208,62496,41760,
		40448,6592,23104,1856,5312,55616,47104,7808,46976,42880,55008,16224,31456,20992,20896,7488,16544,12640,42848,28000,544,32704,24160,52032,57408,32864,35200,15616,51392,32960,33920,34112,3200,30720,47968,50208,17152,63360,50432,61248,42752,47584,25248,54048,47072,15360,48320,41056,7392,10368,37152,7104,19136,10752,49536,47008,51328,35264,8448,24192,56256,13536,2816,57376,40608,14336,39616,38304,8512,3104,27616,56288,41184,61440,30592,2112,32416,58688,40672,11808,58144,22304,5632,13952,58848,56544,59040,61632,61536,5152,18048,512,23168,41472,960,35392,26176,39168,22144,33312,55968,23296,9024,17184,10464,28064,24032,30304,32352,32448,17760,8864,10560,57312,54656,5728,35648,8320,57728,4768,21600,29632,26112,
		34624,25760,36480,9728,46624,58784,22240,58240,11680,28768,9184,3456,63552,44864,5856,49760,29248,43008,15168,25536,28032,9984,17696,51712,52544,22560,40320,8096,55392,18176,13280,60000,10688,52960,17792,37504,20096,21984,25568,46496,58720,32,48704,16992,10592,448,1888,40064,54720,6560,7328,2304,37792,10080,49024,416,19200,8128,45984,2592,16064,19936,48064,4672,52416,26208,44480,29344,36768,55488,7872,59136,3744,35552,47680,26528,12608,59808,52896,11296,13216,51040,8544,28576,31904,44640,39424,34656,18240,19360,27488,37344,7744,44160,15872,39488,21440,27168,48576,9568,56320,44032,34048,41376,14240,29280,256,55168,63328,45472,58464,60384,52768,52608,39968,23616,22976,53664,32928,52288,32224,48864,7168,11584,11456,
		63744,63456,30144,33568,50624,13440,40896,54272,34400,18560,46464,48640,0,45024,28416,47488,12896,7424,41440,41408,42496,2368,53536,27584,54112,10336,38112,58880,18400,3296,20448,96,11616,35680,3840,20256,50400,49408,52352,32320,50976,29984,48928,13024,44320,61280,51360,55136,4480,12864,10880,4000,21312,59360,8736,14112,7776,18624,1728,32032,31328,34304,38368,35424,29408,4512,24800,59552,57632,14400,40288,43392,58176,38848,49600,63648,27072,63872,15648,33824,8480,45440,60544,42944,49472,50048,44896,22848,54784,13792,1120,19680,39744,36736,4736,44768,24864,21728,24640,59968,34080,8288,19872,27040,36192,29568,6656,3552,28896,28992,48032,34432,19040,896,4416,44960,59104,46368,48736,40416,57280,1280,17504,11968,9888,17216,
		63424,26816,20416,36928,23424,31840,57216,26848,21568,26624,7680,42784,41120,45760,43168,16320,36416,56800,24704,57536,39776,16928,32128,3232,4928,60864,40960,36352,44800,51136,17888,41952,26368,54080,51424,64032,11744,32544,36576,31360,51840,53408,54144,34496,49344,31552,5120,18592,55680,44000,63840,6304,61600,30976,1408,29120,7200,17984,33088,40704,8032,22176,128,38752,39456,36448,10848,29760,55904,34560,23776,10176,45920,21216,58368,56608,46432,42624,27360,21536,53792,16896,6080,41152,22528,60992,26496,16288,17408,41536,60224,45216,35008,13632,25632,60768,44416,21824,38592,28640,33696,60064,56704,39872,5696,26976,50912,55360,44512,48672,1088,18304,61856,20288,56224,1024,49984,13248,11776,21408,46272,37920,29088,58208,
		58624,4992,39808,34848,53696,31520,48096,49888,57888,56384,6112,56000,48288,38144,31744,59904,60320,31168,54208,56768,33728,42208,17952,49792,37760,15072,1184,31712,6368,54368,3584,50592,7936,8928,50112,21888,27648,37952,27456,14272,5088,21184,2656,47776,2560,37632,60416,53600,6880,54944,8768,39360,26912,23008,14048,26592,37984,23680,29920,63520,61216,13888,31776,14912,31232,32000,51808,5888,288,11840,53184,5920,14080,17824,47040,44832,15776,24096,58592,704,33184,24512,47520,9632,12576,59584,23872,55584,33152,28128,22656,26944,29216,2944,9472,25024,36064,39936,12512,62240,15936,39392,21472,6144,15328,13728,4352,24928,9376,59200,61376,9856,56448,43488,55424,23136,60096,60928,5536,43136,15552,57472,45088,54464,
		12352,36640,62432,53888,1824,48416,28544,29696,10528,22752,49440,57120,20928,16256,11648,49216,57984,51968,57248,14624,17344,4160,33056,60800,59520,42144,16000,29888,25440,25312,42368,9920,15424,37248,50368,19808,8064,36512,45728,2144,25408,34176,6048,52192,48960,27232,28608,37472,57824,22624,33024,23328,21152,15840,9120,15968,57440,63616,4832,56096,4448,53056,42176,28160,39008,13344,13664,4064,5760,51008,25088,45632,48832,6976,24128,13856,49280,20960,22368,2912,39840,192,47808,36608,27936,28960,61728,58336,46880,28832,41312,44288,51296,36288,62720,60512,38656,51264,30432,768,17568,59840,40512,44608,10816,37536,26400,30464,6176,25376,672,25056,40352,34272,28320,224,3424,5792,61824,1568,59008,54912,57664,44736,
		53504,39072,21920,3680,26272,37664,44544,3488,15008,39648,34528,7584,11232,27136,58432,39904,1984,13472,53344,3392,11392,46944,61056,12672,14784,52672,6432,38400,52576,53632,56736,32192,24736,60896,29824,53312,50496,38080,2080,15520,19264,8960,17856,59488,47296,48224,17440,12320,36832,48000,60736,40032,19296,55808,34240,29312,19072,7552,49696,1440,19328,4192,38560,51616,50080,60576,24288,54240,27808,63488,10944,47904,24960,34144,46848,30816,25696,20672,27712,51488,60832,49248,4384,45824,4288,13056,2240,16672,55936,12384,53856,51904,62080,54848,60704,45120,55040,47840,20128,38336,29472,20736,9152,6400,61984,43520,31808,44672,43968,50944,18336,30944,41984,22272,55520,35872,21376,20224,17536,43872,6208,14944,
		6688,28288,49504,34880,45792,25888,22400,35232,10144,15712,29024,25600,60672,22464,22112,21344,64000,55104,14464,8704,19424,11136,1376,3264,26080,47136,24576,9216,25280,33408,34752,51072,22592,52992,48768,53088,43904,10016,37856,57856,29728,50240,62624,14208,48512,23040,31040,27680,26880,15232,57696,54528,16512,55232,1632,2688,14144,50528,13760,17280,63104,2880,14688,2048,29952,56928,5408,23232,63808,52832,11936,51776,39520,10304,34464,50784,41600,13696,18368,35488,25152,59776,8800,60608,7456,14560,50560,7232,864,22816,60256,23456,23968,18656,7840,6496,38528,41504,53216,27104,59392,50816,22944,4960,10400,35520,56992,46240,59424,25504,64096,14592,33216,12128
	};
	
	public LimChan_RandD_wRedundancy_wValid(RobotController in) { super(in); }
	
	public void broadcast(int index, int value) throws GameActionException {
		// Get the channels
		int rnd = Clock.getRoundNum();

		// Encode and broadcast the transmissions
		rc.broadcast((channelList[rnd+0])+index, ((rnd+0)*validationCode)+value); 
		rc.broadcast((channelList[rnd+1])+index, ((rnd+1)*validationCode)+value); 
		rc.broadcast((channelList[rnd+2])+index, ((rnd+2)*validationCode)+value); 
	}
	
	public int readBroadcast(int index) throws GameActionException {
		int rnd,chan,chanRead,value;
		
		// First, check the current expected channel
		// Assume the broadcast is valid, pull all data from it and validate it
		rnd = Clock.getRoundNum();
		chan = (channelList[rnd])+index;
		chanRead = rc.readBroadcast(chan);
		value = chanRead % validationCode;
		if ( (chanRead-value)/validationCode == rnd ) {
			// The broadcast is valid, return the value
			return value;
		}

		
		// If the last channel is invalid, check the first redundancy, which is next rounds channel   
		// Assume the broadcast is valid, pull all data from it and validate it
		rnd += 1;
		chan = (channelList[rnd])+index;
		chanRead = rc.readBroadcast(chan);
		value = chanRead % validationCode;
		if ( (chanRead-value)/validationCode == rnd ) {
			// The broadcast is valid, return the value
			broadcast(index,value);
			return value;
		}

		
		// If the last channel is invalid, check the second redundancy, which is next next rounds channel   
		// Assume the broadcast is valid, pull all data from it and validate it
		rnd += 1;
		chan = (channelList[rnd])+index;
		chanRead = rc.readBroadcast(chan);
		value = chanRead % validationCode;
		if ( (chanRead-value)/validationCode == rnd ) {
			// The broadcast is valid, return the value
			broadcast(index,value);
			return value;
		}

		
		
		// Future additions, further redundancy may be possible by checking all previous channels for the last known valid result
		/* Extra Redundancy */
		rnd -= 2;
		while ( rnd > 0 ) {
			rnd -= 1;
			chan = (channelList[rnd])+index;
			chanRead = rc.readBroadcast(chan);
			value = chanRead % validationCode;
			if ( (chanRead-value)/validationCode == rnd ) {
				// The broadcast is valid, return the value
				broadcast(index,value);
				return value;
			}
		}
		/* */
		
		return -1;
	}

}
